# -*- coding: utf-8 -*-
"""limpeza_e_tratamento_churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ZX7PTaMZ2JYxrLFdccSyI5YdPUT9GCY

##Analise inicial
"""

import pandas as pd

dados_churn = pd.read_json("/content/dataset-telecon.json")
dados_churn.head()

dados_churn['conta'][0]

pd.json_normalize(dados_churn['conta']).head()

pd.json_normalize(dados_churn['telefone']).head()

"""##Transformando dados em uma tabela"""

import json

with open('/content/dataset-telecon.json') as  f:
  json_bruto = json.load(f)

json_bruto

dados_normalizados = pd.json_normalize(json_bruto)
dados_normalizados.head()

"""##Transformação Inicial dos Dados"""

dados_normalizados.info()

dados_normalizados[dados_normalizados['conta.cobranca.Total'] == ' '].head()

dados_normalizados[dados_normalizados['conta.cobranca.Total'] == ' '][
    ['cliente.tempo_servico', 'conta.contrato', 'conta.cobranca.mensal', 'conta.cobranca.Total']
]

idx = dados_normalizados[dados_normalizados['conta.cobranca.Total'] == ' '].index

dados_normalizados.loc[idx, 'conta.cobranca.Total'] =  dados_normalizados.loc[idx, 'conta.cobranca.mensal'] * 24

dados_normalizados.loc[idx, 'cliente.tempo_servico'] = 24

dados_normalizados.loc[idx][

        ['cliente.tempo_servico', 'conta.contrato', 'conta.cobranca.mensal', 'conta.cobranca.Total']
]

dados_normalizados['conta.cobranca.Total'] = dados_normalizados['conta.cobranca.Total'].astype(float)

dados_normalizados.info()

for col in dados_normalizados.columns:
  print(f'Coluna: {col}')
  print(dados_normalizados[col].unique())
  print('-' * 30)

dados_normalizados.query("Churn == ''")

dados_sem_vazio = dados_normalizados[dados_normalizados['Churn'] != ""].copy()

dados_sem_vazio.info()

dados_sem_vazio.reset_index(drop=True, inplace=True)

dados_sem_vazio

"""# Trabalhando com dados duplicados e nulos

#Identificando e tratando dados duplicados
"""

dados_sem_vazio.duplicated()

dados_sem_vazio.duplicated().sum()

filtro_duplicados = dados_sem_vazio.duplicated()
filtro_duplicados

dados_sem_vazio[filtro_duplicados]

dados_sem_vazio.drop_duplicates(inplace=True)

dados_sem_vazio.duplicated().sum()

"""#Identificando e substituindo dados nulos"""

dados_sem_vazio.isna()

dados_sem_vazio.isna().sum()

dados_sem_vazio.isna().sum().sum()

dados_sem_vazio[dados_sem_vazio.isna().any(axis=1)]

filtro = dados_sem_vazio['cliente.tempo_servico'].isna()

dados_sem_vazio[filtro][['cliente.tempo_servico', 'conta.cobranca.mensal', 'conta.cobranca.Total']]

import numpy as np

dados_sem_vazio['cliente.tempo_servico'].fillna(
    np.ceil(
        dados_sem_vazio['conta.cobranca.Total'] / dados_sem_vazio['conta.cobranca.mensal']
    ), inplace= True
)

dados_sem_vazio[filtro][['cliente.tempo_servico', 'conta.cobranca.mensal', 'conta.cobranca.Total']]

dados_sem_vazio.isna().sum()

"""#Retirando os dados nulos"""

dados_sem_vazio['conta.contrato'].value_counts()

colunas_drop = ['conta.contrato' ,'conta.faturamente_eletronico', 'conta.metodo_pagamento']

dados_sem_vazio[colunas_drop].isna().any(axis=1).sum()

df_sem_nulo = dados_sem_vazio.dropna(subset=colunas_drop).copy()
df_sem_nulo.head()

df_sem_nulo.reset_index(drop=True, inplace= True)

df_sem_nulo.isna().sum()

"""#Trabalhando com os outliers

##Identificando outliers
"""

df_sem_nulo.describe()

import seaborn as sns

sns.boxplot(x=df_sem_nulo['cliente.tempo_servico'])

q1 = df_sem_nulo['cliente.tempo_servico'].quantile(0.25)
q3 = df_sem_nulo['cliente.tempo_servico'].quantile(0.75)
iqr = q3 - q1
limite_inferior = q1 - 1.5 * iqr
limite_superior = q3 + 1.5 * iqr

outliers_index = (df_sem_nulo['cliente.tempo_servico'] < limite_inferior) | (df_sem_nulo['cliente.tempo_servico'] > limite_superior)

df_sem_nulo[outliers_index]['cliente.tempo_servico']

"""#Substituindo valores para os outliers"""

df_sem_out = df_sem_nulo.copy()

df_sem_out[outliers_index]['cliente.tempo_servico']

df_sem_out.loc[outliers_index, 'cliente.tempo_servico'] = np.ceil(
    df_sem_out.loc[outliers_index, 'conta.cobranca.Total'] / df_sem_out.loc[outliers_index, 'conta.cobranca.mensal']
)

sns.boxplot(x=df_sem_out['cliente.tempo_servico'])

df_sem_out[outliers_index][['cliente.tempo_servico', 'conta.cobranca.mensal', 'conta.cobranca.Total']]

"""#Removendo outliers"""

df_sem_out[outliers_index]['cliente.tempo_servico']

q1 = df_sem_out['cliente.tempo_servico'].quantile(0.25)
q3 = df_sem_out['cliente.tempo_servico'].quantile(0.75)
iqr = q3 - q1
limite_inferior = q1 - 1.5 * iqr
limite_superior = q3 + 1.5 * iqr

outliers_index = (df_sem_out['cliente.tempo_servico'] < limite_inferior) | (df_sem_out['cliente.tempo_servico'] > limite_superior)

df_sem_out[outliers_index]

df_sem_out = df_sem_out[~outliers_index]
df_sem_out

sns.boxplot(x=df_sem_out['cliente.tempo_servico'])

df_sem_out.reset_index(drop=True, inplace=True)

df_sem_out

"""#Trabalhando com variáveis categóricas

##Substituindo valores
"""

df_sem_id = df_sem_out.drop('id_cliente', axis = 1 ).copy()

mapeamento = {
    'nao': 0,
    'sim' : 1,
    'masculino' : 0,
    'feminino': 1
}

for col in df_sem_id.columns:
  print(f'Coluna: {col}')
  print(df_sem_id[col].unique())
  print('-' * 30)

colunas = ['Churn', 'conta.faturamente_eletronico', 'conta.contrato', 'cliente.parceiro', 'cliente.dependentes', 'telefone.servico_telefone']

df_sem_id[colunas] = df_sem_id[colunas].replace(mapeamento)
df_sem_id

for col in df_sem_id.columns:
  print(f'Coluna: {col}')
  print(df_sem_id[col].unique())
  print('-' * 30)

"""#One Hot Encoder(dummy)"""

s = pd.Series(list('abca'))
s

pd.get_dummies(s, dtype=int)

df_sem_id.info()

df_dummies = pd.get_dummies(df_sem_id, dtype=int).copy()
df_dummies.head()

df_dummies.columns

df_dummies.info()

